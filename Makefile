##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.7.1] date: [Sat May 30 09:46:53 BST 2020] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = stm32_try


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
Src/main-ex2.c \
Src/nucleo_hal_bsp.c \
Src/stm32f4xx_it.c \
Src/stm32f4xx_hal_msp.c \
Src/stm32f4xx_hal_timebase_TIM.c \
Src/config.c \
Src/fatfs.c \
system/src/stm32f4xx/stm32f4xx_hal_adc.c \
system/src/stm32f4xx/stm32f4xx_hal_uart.c \
system/src/stm32f4xx/stm32f4xx_hal_tim.c \
system/src/stm32f4xx/stm32f4xx_hal_tim_ex.c \
system/src/stm32f4xx/stm32f4xx_hal_rcc.c \
system/src/stm32f4xx/stm32f4xx_hal_rcc_ex.c \
system/src/stm32f4xx/stm32f4xx_hal_flash.c \
system/src/stm32f4xx/stm32f4xx_hal_flash_ex.c \
system/src/stm32f4xx/stm32f4xx_hal_flash_ramfunc.c \
system/src/stm32f4xx/stm32f4xx_hal_gpio.c \
system/src/stm32f4xx/stm32f4xx_hal_dma_ex.c \
system/src/stm32f4xx/stm32f4xx_hal_dma.c \
system/src/stm32f4xx/stm32f4xx_hal_pwr.c \
system/src/stm32f4xx/stm32f4xx_hal_pwr_ex.c \
system/src/stm32f4xx/stm32f4xx_hal_cortex.c \
system/src/stm32f4xx/stm32f4xx_hal.c \
system/src/stm32f4xx/stm32f4xx_hal_spi.c \
system/src/cmsis/system_stm32f4xx.c \
Middlewares/FatFs/src/option/ccsbcs.c \
Middlewares/FatFs/src/ff.c \
Middlewares/FatFs/src/ff_gen_drv.c \
Middlewares/FatFs/src/diskio.c \
Middlewares/FatFs/src/drivers/sd_diskio_spi.c \
Middlewares/ioLibrary_Driver/Ethernet/wizchip_conf.c \
Middlewares/ioLibrary_Driver/Ethernet/W5500/w5500.c \
Middlewares/ioLibrary_Driver/Ethernet/socket.c \
Middlewares/ioLibrary_Driver/Internet/httpServer/httpServer.c \
Middlewares/ioLibrary_Driver/Internet/httpServer/httpParser.c \
Middlewares/ioLibrary_Driver/Internet/httpServer/httpUtil.c \
Middlewares/ioLibrary_Driver/Internet/DHCP/dhcp.c \
Middlewares/FreeRTOS/CMSIS_RTOS/cmsis_os.c \
Middlewares/FreeRTOS/tasks.c \
Middlewares/FreeRTOS/queue.c \
Middlewares/FreeRTOS/list.c \
Middlewares/FreeRTOS/portable/GCC/ARM_CM4F/port.c \
Middlewares/FreeRTOS/portable/MemMang/heap_4.c

# ASM sources
ASM_SOURCES =  \
system/src/cmsis/startup_stm32f446xx.S


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F446xx \
-DRETARGET_TCP \
-D_USE_SDCARD_ \
-DUSE_FREE_RTOS

ifeq ($(DEBUG), 1)
  OPT += -O0
endif



# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-IInc \
-Isystem/include/stm32f4xx \
-Isystem/include/cmsis/device \
-Isystem/include/cmsis \
-Isystem/include \
-Inewlib-cygwin/newlib/libc/include \
-IMiddlewares/FatFs/src \
-IMiddlewares/FatFs/src/drivers \
-IMiddlewares/FreeRTOS/CMSIS_RTOS \
-IMiddlewares/FreeRTOS/include \
-IMiddlewares/FreeRTOS/Source/include \
-IMiddlewares/FreeRTOS/Source/CMSIS_RTOS \
-IMiddlewares/FreeRTOS/portable/GCC/ARM_CM4F \
-IMiddlewares/ioLibrary_Driver/Internet \
-IMiddlewares/ioLibrary_Driver/Ethernet \
-IMiddlewares


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"
CFLAGS += -nostdlib


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F446RETx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys

# run docker-compose up toolchain to build newlib
LIBDIR = -L./newlib-cygwin/install/newlib/arm-none-eabi/lib/thumb/v7e-m+fp/hard

LDFLAGS = $(MCU) -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections
LDFLAGS += -specs=nosys.specs 

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.S=.o)))
vpath %.S $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.S Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
